// f = function
// a = range start
// b = range end
// TOL = acceptance range
bisection_find (f, a, b, TOL)
{
	// Find a new midpoint
	new c = a + b in
	c = c / 2;

	let num_iter = 10 in
	new count = 1 in
	while (count <= num_iter)
	{
		// Find the range between the bounds
		new diff = b - a in
		diff = diff / 2;

		// End successfully if f(c) is 0 or we are within the tolerance range
		let fc_null = f(c) == 0 in
		let within_tol = diff <= TOL in
	  if (fc_null || within_tol)
		{
			// Success
	    print_int (~c);
			~c
	  }
		else
		{
			// Increase the count
		  count = ~count + 1;

			//Reiterate with a new range, depending on whether f(c) zero-crosses against the value of f(a)
			let fc_sign = f(c) >= 0 in
			let fa_sign = f(a) >= 0 in
			if (fc_sign == fa_sign)
			{
				a = ~c
			}
			else
			{
				b = ~c
			}
		}
	}
}
