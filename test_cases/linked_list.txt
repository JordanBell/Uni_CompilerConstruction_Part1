include "util.txt"

struct linked_list
{
  data = 0;
  p_next = false
}

ll_add(ll, val)
{
  if(ll.p_next)
  {
    // Recurse to the final node
    let new_child = ll_add(ll.p_next, val) in
    ll.p_next = new_child;
    ll
  }
  else
  {
    // This is the final node; set the value to this node, create a link to the next
    ll.data = val;
    new node = struct linked_list in
    ll.p_next = ~node;
    ll
  }
}

ll_print_err_oob(ll, i)
{
  new errmsg = "Index out of bounds. Index: " in
  errmsg = ~errmsg + string_of_int(i);
  let s = ", size: " in
  errmsg = ~errmsg + s;
  errmsg = ~errmsg + string_of_int(ll_size(ll));
  print(~errmsg)
}

ll_get(ll, i)
{
  if(i >= ll_size(ll))
  {
    ll_print_err_oob(ll, i);
    ll.data
  }
  else
  {
    if(i <= 0)
    {
      ll.data
    }
    else
    {
      ll_get(ll.p_next, i - 1)
    }
  }
}

ll_set(ll, i, x)
{
  if(i >= ll_size(ll))
  {
    ll_print_err_oob(ll, i);
    ll
  }
  else
  {
    if(i <= 0)
    {
      print(i);
      ll.data = x;
      ll
    }
    else
    {
      ll.p_next = ll_set(ll.p_next, i - 1, x);
      ll
    }
  }
}

ll_fold(ll, f, acc)
{
  if(ll.p_next)
  {
    // Non-null link; apply to next value
    ll_fold(ll.p_next, f, f(ll.data, acc))
  }
  else
  {
    acc
  }
}

// Function used in folding (for ll_to_string)
to_comma_separated_strings(val, acc)
{
  let prefix = acc + string_of_int(val) in
  prefix + ";"
}

// Function used in folding (for ll_size)
count(_, acc)
{
  acc + 1
}

ll_to_string(ll)
{
  let mid = ll_fold(ll, &to_comma_separated_strings, "") in
  let prefix = "[" + mid in
  prefix + "]"
}

ll_size(ll)
{
  ll_fold(ll, &count, 0)
}

ll_map(ll, f)
{
  new r_ll = ll in

  if(r_ll.p_next)
  {
    let result = f(r_ll.data) in
    r_ll.data = result;
    r_ll.p_next = ll_map(r_ll.p_next, f)
  }
  else
  {
    ""
  };

  ~r_ll
}

main()
{
  print(""); // Newline
  new my_list = struct linked_list in
  my_list = ll_add(~my_list, 0);
  my_list = ll_add(~my_list, 1);
  my_list = ll_add(~my_list, 2);
  my_list = ll_add(~my_list, 3);

  let size = ll_size(~my_list) in
  print("Num elements: " + string_of_int(size));
  print(ll_to_string(~my_list));

  my_list = ll_map(~my_list, &square);
  print("Squared: " + ll_to_string(~my_list));

  my_list = ll_map(~my_list, &square);
  print("Squared(squared): " + ll_to_string(~my_list));

  let ival = ll_get(~my_list, 2) in
  print("Third value is: " + string_of_int(ival));

  print("Setting fourth to 100...");
  my_list = ll_set(~my_list, 3, 100);
  print(ll_to_string(~my_list));

  "" // Effectively a unit return
}
