struct linked_list
{
  data = 0;
  p_next = false
}

ll_add(ll, val)
{
  if(ll.p_next)
  {
    // Recurse to the final node
    let new_child = ll_add(ll.p_next, val) in
    ll.p_next = new_child;
    ll
  }
  else
  {
    // This is the final node; set the value to this node, create a link to the next
    ll.data = val;
    new node = struct linked_list in
    ll.p_next = ~node;
    ll
  }
}

mod(i, divisor)
{
  new remainder = i in
  while(~remainder >= divisor)
  {
    remainder = ~remainder - divisor
  };

  ~remainder
}

string_of_int(i)
{
          if(i == 0) { "0" }
  else {  if(i == 1) { "1" }
  else {  if(i == 2) { "2" }
  else {  if(i == 3) { "3" }
  else {  if(i == 4) { "4" }
  else {  if(i == 5) { "5" }
  else {  if(i == 6) { "6" }
  else {  if(i == 7) { "7" }
  else {  if(i == 8) { "8" }
  else {  if(i == 9) { "9" }
  else
  {
    // Recurse for the different digits
    let upper_digits = i / 10 in
    let str_upper_digits = string_of_int(upper_digits) in

    let last_digit = mod(i, 10) in
    let str_last_digit = string_of_int(last_digit) in
    str_upper_digits + str_last_digit
  }}}}}}}}}}
}

ll_fold(ll, f, acc)
{
  if(ll.p_next)
  {
    // Non-null link; apply to next value
    ll_fold(ll.p_next, f, f(ll.data, acc))
  }
  else
  {
    acc
  }
}

to_comma_separated_strings(val, acc)
{
  let prefix = acc + string_of_int(val) in
  prefix + ";"
}

ll_to_string(ll)
{
  let mid = ll_fold(ll, &to_comma_separated_strings, "") in
  let prefix = "[" + mid in
  prefix + "]"
}

count(_, acc)
{
  acc + 1
}

ll_size(ll)
{
  ll_fold(ll, &count, 0)
}

// Mapping functions
square(val)
{
  val * val
}

ll_map(ll, f)
{
  new r_ll = ll in

  if(r_ll.p_next)
  {
    let result = f(r_ll.data) in
    r_ll.data = result;
    r_ll.p_next = ll_map(r_ll.p_next, f)
  }
  else
  {
    ""
  };

  ~r_ll
}

print_int(i)
{
  print(i);
  i
}

main()
{
  print(""); // Newline
  new my_list = struct linked_list in
  my_list = ll_add(~my_list, 0);
  my_list = ll_add(~my_list, 1);
  my_list = ll_add(~my_list, 2);
  my_list = ll_add(~my_list, 3);

  print("Before: " + ll_to_string(~my_list));

  let size = ll_size(~my_list) in
  print("Num elements: " + string_of_int(size));

  my_list = ll_map(~my_list, &square);
  print("Squared: " + ll_to_string(~my_list));

  my_list = ll_map(~my_list, &square);
  print("Squared(squared): " + ll_to_string(~my_list));

  "" // Effectively a unit return
}
