sum_10:
	pushq	%rbp
	movq %rsp, %rbp
	# offset 0
	mov	88(%rbp), %rax
	push	%rax
	# offset 1
	mov	80(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 13
	# offset 2
	mov	72(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 15
	# offset 3
	mov	64(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 17
	# offset 4
	mov	56(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 19
	# offset 5
	mov	48(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 21
	# offset 6
	mov	40(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 23
	# offset 7
	mov	32(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 25
	# offset 8
	mov	24(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 27
	# offset 9
	mov	16(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 29
	popq	%rax
	movq %rbp, %rsp
	popq	%rbp
	ret
