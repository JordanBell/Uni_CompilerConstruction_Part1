main:
pushq	%rbp
movq %rsp, %rbp
	push	$6
.W0:
	# offset 1
	mov	-24(%rbp), %rax
	push	%rax
	push	$1
	pop	%rax
	pop	%rbx
	sub	%rax, %rbx
	mov	$0, %rax
	cmp	%rax, %rbx
	jge	.BOP0
	push	$0
	jmp	.CONT_BOP0
.BOP0:
	push	$1
.CONT_BOP0:
	pop	%rax
	mov	$0, %rbx
	cmp	%rax, %rbx
	je	.CONT_W0
	push	$0
.W1:
	# offset 5
	mov	-56(%rbp), %rax
	push	%rax
	push	$10
	pop	%rax
	pop	%rbx
	sub	%rax, %rbx
	mov	$0, %rax
	cmp	%rax, %rbx
	jle	.BOP1
	push	$0
	jmp	.CONT_BOP1
.BOP1:
	push	$1
.CONT_BOP1:
	pop	%rax
	mov	$0, %rbx
	cmp	%rax, %rbx
	je	.CONT_W1
	# offset 5
	mov	-56(%rbp), %rax
	push	%rax
	push	$1
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
	# write offset 5
	pop	%rax
	mov	%rax, -56(%rbp)
	push	-56(%rbp)
	jmp	.W1
.CONT_W1:
	# offset 1
	mov	-24(%rbp), %rax
	push	%rax
	push	$1
	pop	%rax
	pop	%rbx
	sub	%rax, %rbx
	push	%rbx
	# write offset 1
	pop	%rax
	mov	%rax, -24(%rbp)
	push	-24(%rbp)
	pop	%rax
	pop	%rbx
	push	%rax
	jmp	.W0
.CONT_W0:
	# offset 1
	mov	-24(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	push	%rax
popq	%rbp
ret


	# Generated code START
	push	$6
.W2:
	# offset 16
	mov	-144(%rbp), %rax
	push	%rax
	push	$1
	pop	%rax
	pop	%rbx
	sub	%rax, %rbx
	mov	$0, %rax
	cmp	%rax, %rbx
	jge	.BOP2
	push	$0
	jmp	.CONT_BOP2
.BOP2:
	push	$1
.CONT_BOP2:
	pop	%rax
	mov	$0, %rbx
	cmp	%rax, %rbx
	je	.CONT_W2
	push	$0
.W3:
	# offset 20
	mov	-176(%rbp), %rax
	push	%rax
	push	$10
	pop	%rax
	pop	%rbx
	sub	%rax, %rbx
	mov	$0, %rax
	cmp	%rax, %rbx
	jle	.BOP3
	push	$0
	jmp	.CONT_BOP3
.BOP3:
	push	$1
.CONT_BOP3:
	pop	%rax
	mov	$0, %rbx
	cmp	%rax, %rbx
	je	.CONT_W3
	# offset 20
	mov	-176(%rbp), %rax
	push	%rax
	push	$1
	pop	%rax
	pop	%rbx
	add	%rax, %rbx
	push	%rbx
	# write offset 20
	pop	%rax
	mov	%rax, -176(%rbp)
	push	-176(%rbp)
	jmp	.W3
.CONT_W3:
	# offset 16
	mov	-144(%rbp), %rax
	push	%rax
	push	$1
	pop	%rax
	pop	%rbx
	sub	%rax, %rbx
	push	%rbx
	# write offset 16
	pop	%rax
	mov	%rax, -144(%rbp)
	push	-144(%rbp)
	pop	%rax
	pop	%rbx
	push	%rax
	jmp	.W2
.CONT_W2:
	# offset 16
	mov	-144(%rbp), %rax
	push	%rax
	pop	%rax
	pop	%rbx
	push	%rax

	# Push the top of the stack onto the output register
	pop	-4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edi
	# Generated code END

