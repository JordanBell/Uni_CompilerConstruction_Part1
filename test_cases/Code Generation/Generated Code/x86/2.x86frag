factorial:
	pushq	%rbp
	movq %rsp, %rbp
	# offset 0
	mov	16(%rbp), %rax
	push	%rax
### Incrementing Stack Pointer: 2
	push	$2
### Incrementing Stack Pointer: 3
	pop	%rax
	pop	%rbx
	sub	%rax, %rbx
	mov	$0, %rax
	cmp	%rax, %rbx
	jle	.BOP0
	push	$0
	jmp	.CONT_BOP0
.BOP0:
	push	$1
.CONT_BOP0:
### Incrementing Stack Pointer: 4
	pop	%rax
	mov	$0, %rbx
	cmp	%rax, %rbx
	jne	.IE0
	# offset 0
	mov	16(%rbp), %rax
	push	%rax
### Incrementing Stack Pointer: 5
	push	$1
### Incrementing Stack Pointer: 6
	pop	%rax
	pop	%rbx
	sub	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 7
	# offset 0
	mov	16(%rbp), %rax
	push	%rax
### Incrementing Stack Pointer: 8
	# offset 7
	mov	-40(%rbp), %rax
	push	%rax
### Incrementing Stack Pointer: 9
	call	factorial
	push	%rax
	pop	%rax
	pop	%rbx
	imul	%rax, %rbx
	push	%rbx
### Incrementing Stack Pointer: 10
	pop	%rax
	pop	%rbx
	push	%rax
	jmp	.CONT_IE0
.IE0:
	# offset 0
	mov	16(%rbp), %rax
	push	%rax
### Incrementing Stack Pointer: 11
.CONT_IE0:
	popq	%rax
	movq %rbp, %rsp
	popq	%rbp
	ret
