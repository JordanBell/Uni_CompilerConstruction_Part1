# 1 "Parser_lex.mll"
 
open Parser_par
exception SyntaxError of string

# 7 "Parser_lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\232\255\233\255\234\255\002\000\001\000\002\000\003\000\
    \004\000\005\000\000\000\000\000\245\255\246\255\247\255\248\255\
    \249\255\250\255\251\255\252\255\019\000\254\255\001\000\003\000\
    \244\255\000\000\002\000\243\255\242\255\241\255\240\255\239\255\
    \238\255\237\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\022\000\022\000\019\000\020\000\
    \022\000\022\000\022\000\022\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\255\255\001\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\021\000\021\000\023\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\006\000\000\000\023\000\000\000\000\000\005\000\032\000\
    \013\000\012\000\017\000\019\000\000\000\018\000\000\000\016\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\000\000\003\000\009\000\007\000\008\000\031\000\
    \030\000\029\000\028\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\010\000\024\000\027\000\
    \000\000\011\000\000\000\000\000\025\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\004\000\014\000\033\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\022\000\023\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\023\000\255\255\255\255\000\000\005\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\006\000\
    \007\000\008\000\009\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\011\000\026\000\
    \255\255\000\000\255\255\255\255\010\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\025\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\004\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec read lexbuf =
    __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 13 "Parser_lex.mll"
          ( read lexbuf )
# 120 "Parser_lex.ml"

  | 1 ->
# 14 "Parser_lex.mll"
            ( read lexbuf )
# 125 "Parser_lex.ml"

  | 2 ->
# 17 "Parser_lex.mll"
         ( CONST (int_of_string (Lexing.lexeme lexbuf)) )
# 130 "Parser_lex.ml"

  | 3 ->
# 18 "Parser_lex.mll"
         ( PLUS )
# 135 "Parser_lex.ml"

  | 4 ->
# 19 "Parser_lex.mll"
         ( MINUS )
# 140 "Parser_lex.ml"

  | 5 ->
# 20 "Parser_lex.mll"
         ( TIMES )
# 145 "Parser_lex.ml"

  | 6 ->
# 21 "Parser_lex.mll"
         ( DIVIDE )
# 150 "Parser_lex.ml"

  | 7 ->
# 24 "Parser_lex.mll"
        ( CURLY_OPEN )
# 155 "Parser_lex.ml"

  | 8 ->
# 25 "Parser_lex.mll"
        ( CURLY_CLOSE )
# 160 "Parser_lex.ml"

  | 9 ->
# 26 "Parser_lex.mll"
        ( PARENTHESIS_OPEN )
# 165 "Parser_lex.ml"

  | 10 ->
# 27 "Parser_lex.mll"
        ( PARENTHESIS_CLOSE )
# 170 "Parser_lex.ml"

  | 11 ->
# 30 "Parser_lex.mll"
         ( IF )
# 175 "Parser_lex.ml"

  | 12 ->
# 31 "Parser_lex.mll"
          ( ELSE )
# 180 "Parser_lex.ml"

  | 13 ->
# 34 "Parser_lex.mll"
         ( LEQ )
# 185 "Parser_lex.ml"

  | 14 ->
# 35 "Parser_lex.mll"
         ( GEQ )
# 190 "Parser_lex.ml"

  | 15 ->
# 36 "Parser_lex.mll"
         ( EQUAL )
# 195 "Parser_lex.ml"

  | 16 ->
# 37 "Parser_lex.mll"
         ( NOTEQ )
# 200 "Parser_lex.ml"

  | 17 ->
# 38 "Parser_lex.mll"
         ( AND )
# 205 "Parser_lex.ml"

  | 18 ->
# 39 "Parser_lex.mll"
         ( OR )
# 210 "Parser_lex.ml"

  | 19 ->
# 40 "Parser_lex.mll"
        ( NOT )
# 215 "Parser_lex.ml"

  | 20 ->
# 43 "Parser_lex.mll"
        ( ASG )
# 220 "Parser_lex.ml"

  | 21 ->
# 44 "Parser_lex.mll"
        ( SEQ )
# 225 "Parser_lex.ml"

  | 22 ->
# 47 "Parser_lex.mll"
       ( raise (SyntaxError ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 230 "Parser_lex.ml"

  | 23 ->
# 48 "Parser_lex.mll"
         ( EOF )
# 235 "Parser_lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

;;

