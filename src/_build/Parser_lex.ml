# 1 "Parser_lex.mll"
 
open Parser_par
exception SyntaxError of string

# 7 "Parser_lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\230\255\231\255\232\255\002\000\001\000\002\000\003\000\
    \004\000\005\000\001\000\001\000\000\000\001\000\245\255\246\255\
    \247\255\248\255\249\255\250\255\251\255\252\255\019\000\254\255\
    \001\000\003\000\244\255\001\000\003\000\243\255\000\000\000\000\
    \000\000\001\000\000\000\001\000\242\255\002\000\001\000\002\000\
    \001\000\004\000\003\000\003\000\241\255\240\255\239\255\238\255\
    \237\255\236\255\235\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\024\000\024\000\021\000\022\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\
    \001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\023\000\023\000\025\000\024\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\006\000\000\000\025\000\000\000\000\000\005\000\049\000\
    \015\000\014\000\019\000\021\000\000\000\020\000\000\000\018\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\000\000\003\000\009\000\007\000\008\000\048\000\
    \047\000\046\000\045\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
    \041\000\031\000\000\000\000\000\032\000\012\000\030\000\026\000\
    \029\000\013\000\034\000\038\000\027\000\042\000\035\000\039\000\
    \010\000\043\000\011\000\037\000\028\000\036\000\040\000\044\000\
    \000\000\000\000\000\000\017\000\004\000\016\000\050\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\025\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\025\000\255\255\255\255\000\000\005\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\006\000\
    \007\000\008\000\009\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\032\000\
    \040\000\030\000\255\255\255\255\031\000\000\000\011\000\013\000\
    \028\000\000\000\033\000\037\000\012\000\041\000\034\000\038\000\
    \000\000\042\000\000\000\010\000\027\000\035\000\039\000\043\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\004\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec read lexbuf =
    __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 13 "Parser_lex.mll"
          ( read lexbuf )
# 126 "Parser_lex.ml"

  | 1 ->
# 14 "Parser_lex.mll"
            ( read lexbuf )
# 131 "Parser_lex.ml"

  | 2 ->
# 17 "Parser_lex.mll"
         ( CONST (int_of_string (Lexing.lexeme lexbuf)) )
# 136 "Parser_lex.ml"

  | 3 ->
# 18 "Parser_lex.mll"
         ( PLUS )
# 141 "Parser_lex.ml"

  | 4 ->
# 19 "Parser_lex.mll"
         ( MINUS )
# 146 "Parser_lex.ml"

  | 5 ->
# 20 "Parser_lex.mll"
         ( TIMES )
# 151 "Parser_lex.ml"

  | 6 ->
# 21 "Parser_lex.mll"
         ( DIVIDE )
# 156 "Parser_lex.ml"

  | 7 ->
# 24 "Parser_lex.mll"
        ( CURLY_OPEN )
# 161 "Parser_lex.ml"

  | 8 ->
# 25 "Parser_lex.mll"
        ( CURLY_CLOSE )
# 166 "Parser_lex.ml"

  | 9 ->
# 26 "Parser_lex.mll"
        ( PARENTHESIS_OPEN )
# 171 "Parser_lex.ml"

  | 10 ->
# 27 "Parser_lex.mll"
        ( PARENTHESIS_CLOSE )
# 176 "Parser_lex.ml"

  | 11 ->
# 30 "Parser_lex.mll"
         ( IF )
# 181 "Parser_lex.ml"

  | 12 ->
# 31 "Parser_lex.mll"
          ( ELSE )
# 186 "Parser_lex.ml"

  | 13 ->
# 32 "Parser_lex.mll"
              ( READINT )
# 191 "Parser_lex.ml"

  | 14 ->
# 33 "Parser_lex.mll"
               ( PRINTINT )
# 196 "Parser_lex.ml"

  | 15 ->
# 36 "Parser_lex.mll"
         ( LEQ )
# 201 "Parser_lex.ml"

  | 16 ->
# 37 "Parser_lex.mll"
         ( GEQ )
# 206 "Parser_lex.ml"

  | 17 ->
# 38 "Parser_lex.mll"
         ( EQUAL )
# 211 "Parser_lex.ml"

  | 18 ->
# 39 "Parser_lex.mll"
         ( NOTEQ )
# 216 "Parser_lex.ml"

  | 19 ->
# 40 "Parser_lex.mll"
         ( AND )
# 221 "Parser_lex.ml"

  | 20 ->
# 41 "Parser_lex.mll"
         ( OR )
# 226 "Parser_lex.ml"

  | 21 ->
# 42 "Parser_lex.mll"
        ( NOT )
# 231 "Parser_lex.ml"

  | 22 ->
# 45 "Parser_lex.mll"
        ( ASG )
# 236 "Parser_lex.ml"

  | 23 ->
# 46 "Parser_lex.mll"
        ( SEQ )
# 241 "Parser_lex.ml"

  | 24 ->
# 49 "Parser_lex.mll"
       ( raise (SyntaxError ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 246 "Parser_lex.ml"

  | 25 ->
# 50 "Parser_lex.mll"
         ( EOF )
# 251 "Parser_lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

;;

